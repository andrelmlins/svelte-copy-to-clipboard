import { SvelteComponent, init, safe_not_equal, create_slot, get_slot_context, get_slot_changes, transition_in, transition_out } from 'svelte/internal';

/* src/index.svelte generated by Svelte v3.18.1 */

const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ copy: /*copy*/ ctx[0] });

function create_fragment(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, get_default_slot_changes));
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { text } = $$props;
	let { onCopy } = $$props;
	let { onFail } = $$props;

	const copy = () => {
		navigator.clipboard.writeText(text).then(
			() => {
				if (onCopy) {
					onCopy();
				}
			},
			e => {
				if (onFail) {
					onFail(e);
				}
			}
		);
	};

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("text" in $$props) $$invalidate(1, text = $$props.text);
		if ("onCopy" in $$props) $$invalidate(2, onCopy = $$props.onCopy);
		if ("onFail" in $$props) $$invalidate(3, onFail = $$props.onFail);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [copy, text, onCopy, onFail, $$scope, $$slots];
}

class Src extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { text: 1, onCopy: 2, onFail: 3 });
	}
}

export default Src;
