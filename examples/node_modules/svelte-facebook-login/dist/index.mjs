import { SvelteComponent, init, safe_not_equal, create_slot, get_slot_context, get_slot_changes, transition_in, transition_out } from 'svelte/internal';
import { createEventDispatcher } from 'svelte';

/* src/index.svelte generated by Svelte v3.17.3 */
const get_default_slot_changes = dirty => ({});
const get_default_slot_context = ctx => ({ onLogin: /*onLogin*/ ctx[0] });

function create_fragment(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot && default_slot.p && dirty & /*$$scope*/ 1024) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context), get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, get_default_slot_changes));
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

const urlFacebook = "https://www.facebook.com/v5.0/dialog/oauth";

function instance($$self, $$props, $$invalidate) {
	let { clientId } = $$props;
	let { state } = $$props;
	let { redirectUri } = $$props;
	const dispatch = createEventDispatcher();
	let interval = 0;
	let popupWindow;

	const convertQueryParams = url => {
		const query = url.substr(1);
		const result = {};

		query.split("&").forEach(param => {
			const item = param.split("=");
			result[item[0]] = decodeURIComponent(item[1]);
		});

		return result;
	};

	const close = () => {
		if (interval) {
			window.clearInterval(interval);
			interval = null;
		}

		popupWindow.close();
	};

	// SvelteGithubLogin based
	const poll = () => {
		interval = window.setInterval(
			() => {
				try {
					if (!popupWindow || popupWindow.closed !== false) {
						close();
						dispatch("error", new Error("The popup was closed"));
						return;
					}

					if (popupWindow.location.href === urlFacebook || popupWindow.location.pathname === "blank") {
						return;
					}

					dispatch("success", convertQueryParams(popupWindow.location.search));
					close();
				} catch(error) {
					
				} // error
			},
			500
		);
	};

	const onLogin = () => {
		const urlParams = `client_id=${clientId}&state=${state}&redirect_uri=${redirectUri}`;
		popupWindow = window.open(`${urlFacebook}?${urlParams}`, "facebook-oauth", "");
		dispatch("request");
		poll();
	};

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("clientId" in $$props) $$invalidate(1, clientId = $$props.clientId);
		if ("state" in $$props) $$invalidate(2, state = $$props.state);
		if ("redirectUri" in $$props) $$invalidate(3, redirectUri = $$props.redirectUri);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		onLogin,
		clientId,
		state,
		redirectUri,
		interval,
		popupWindow,
		dispatch,
		convertQueryParams,
		close,
		poll,
		$$scope,
		$$slots
	];
}

class Src extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { clientId: 1, state: 2, redirectUri: 3 });
	}
}

export default Src;
